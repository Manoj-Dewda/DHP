// Analytics.js - Handles the analytics page functionality

document.addEventListener('DOMContentLoaded', async () => {
    try {
        // Initialize all charts
        await Promise.all([
            initSalaryByDomainChart(),
            initLocationDistributionChart(),
            initSalaryVsDemandChart(),
            initCompanyHiringChart(),
            loadSalaryStats(),
            loadLocationData(),
            initMarketQuadrants()
        ]);

        // Initialize filter functionality
        initFilterFunctionality();
    } catch (error) {
        console.error('Error initializing analytics page:', error);
        Utils.createToast('Failed to initialize analytics page', 'danger');
    }
});

// Initialize salary by domain chart
async function initSalaryByDomainChart() {
    try {
        Utils.showLoading('salaryChartLoader');
        
        const data = await Utils.fetchData('/salary-insights');
        
        if (data && data.length > 0) {
            const ctx = document.getElementById('salaryByDomainChart').getContext('2d');
            
            // Extract domain names and average salaries
            const domains = data.slice(0, 10).map(item => item.domain);
            const salaries = data.slice(0, 10).map(item => item.avg_salary);
            
            // Create gradient
            const gradient = ctx.createLinearGradient(0, 0, 0, 400);
            gradient.addColorStop(0, 'rgba(76, 201, 240, 0.8)');
            gradient.addColorStop(1, 'rgba(76, 201, 240, 0.1)');
            
            // Create chart
            window.salaryByDomainChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: domains,
                    datasets: [{
                        label: 'Average Salary (â‚¹)',
                        data: salaries,
                        backgroundColor: gradient,
                        borderColor: 'rgba(76, 201, 240, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `Average Salary: ${Utils.formatCurrency(context.raw)}`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return Utils.formatCurrency(value);
                                },
                                color: '#adb5bd'
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                color: '#adb5bd',
                                maxRotation: 45,
                                minRotation: 45
                            }
                        }
                    }
                }
            });
        } else {
            document.getElementById('salaryByDomainChart').innerHTML = '<div class="text-center p-4">No data available</div>';
        }
    } catch (error) {
        console.error('Error initializing salary by domain chart:', error);
    } finally {
        Utils.hideLoading('salaryChartLoader');
    }
}

// Initialize location distribution chart
async function initLocationDistributionChart() {
    try {
        Utils.showLoading('locationChartLoader');
        
        const data = await Utils.fetchData('/jobs-by-city');
        
        if (data && data.length > 0) {
            const ctx = document.getElementById('locationDistributionChart').getContext('2d');
            
            // Extract location names and counts
            const locations = data.slice(0, 8).map(item => item.city);
            const counts = data.slice(0, 8).map(item => item.count);
            const colors = Utils.generateColors(locations.length, 0.8);
            
            // Create chart
            window.locationDistributionChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: locations,
                    datasets: [{
                        data: counts,
                        backgroundColor: colors,
                        borderColor: colors.map(color => color.replace(', 0.8)', ', 1)')),
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                color: '#adb5bd',
                                font: {
                                    size: 12
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((context.raw / total) * 100);
                                    return `${context.label}: ${context.raw} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
            
            // Update location table
            updateLocationTable(data);
        } else {
            document.getElementById('locationDistributionChart').innerHTML = '<div class="text-center p-4">No data available</div>';
        }
    } catch (error) {
        console.error('Error initializing location distribution chart:', error);
    } finally {
        Utils.hideLoading('locationChartLoader');
    }
}

// Update location table with data
async function updateLocationTable(locationData) {
    try {
        const tableBody = document.getElementById('locationTableBody');
        
        if (tableBody && locationData && locationData.length > 0) {
            // Get filtered data to calculate average salary per location
            const filteredData = await Utils.fetchData('/filter-data');
            
            // Create a map of location to average salary
            const locationSalaryMap = new Map();
            
            if (filteredData && filteredData.length > 0) {
                // Group by location and calculate average salary
                filteredData.forEach(item => {
                    if (!locationSalaryMap.has(item.Location)) {
                        locationSalaryMap.set(item.Location, {
                            total: item.avg_salary,
                            count: 1
                        });
                    } else {
                        const current = locationSalaryMap.get(item.Location);
                        locationSalaryMap.set(item.Location, {
                            total: current.total + item.avg_salary,
                            count: current.count + 1
                        });
                    }
                });
            }
            
            // Clear table
            tableBody.innerHTML = '';
            
            // Add rows for top 5 locations
            locationData.slice(0, 5).forEach(location => {
                const row = document.createElement('tr');
                
                // Calculate average salary for this location
                const salaryInfo = locationSalaryMap.get(location.city);
                const avgSalary = salaryInfo ? (salaryInfo.total / salaryInfo.count) : 0;
                
                row.innerHTML = `
                    <td>${location.city}</td>
                    <td>${location.count}</td>
                    <td>${Utils.formatCurrency(avgSalary)}</td>
                `;
                
                tableBody.appendChild(row);
            });
            
            // Update location analysis
            const topLocation = locationData[0]?.city || 'N/A';
            const topLocationCount = locationData[0]?.count || 0;
            const topLocationPercentage = Math.round((topLocationCount / locationData.reduce((acc, loc) => acc + loc.count, 0)) * 100);
            
            const locationAnalysis = document.getElementById('locationAnalysis');
            if (locationAnalysis) {
                locationAnalysis.innerHTML = `
                    <strong>${topLocation}</strong> leads with ${topLocationCount} internship listings (${topLocationPercentage}% of total). 
                    Remote work ("Work from home") accounts for a significant portion of all opportunities, providing flexibility for interns.
                    Consider targeting companies in these top locations for better internship prospects.
                `;
            }
        }
    } catch (error) {
        console.error('Error updating location table:', error);
    }
}

// Initialize salary vs. demand scatter chart
async function initSalaryVsDemandChart() {
    try {
        Utils.showLoading('scatterChartLoader');
        
        // Get domain counts
        const domainCounts = await Utils.fetchData('/top-domains');
        // Get salary data
        const salaryData = await Utils.fetchData('/salary-insights');
        
        if (domainCounts && salaryData && domainCounts.length > 0 && salaryData.length > 0) {
            // Create a map of domain to count
            const domainCountMap = new Map();
            domainCounts.forEach(item => {
                domainCountMap.set(item.domain, item.count);
            });
            
            // Create dataset for scatter plot
            const scatterData = [];
            
            salaryData.forEach(item => {
                if (domainCountMap.has(item.domain)) {
                    scatterData.push({
                        x: domainCountMap.get(item.domain), // demand (count)
                        y: item.avg_salary, // salary
                        domain: item.domain
                    });
                }
            });
            
            const ctx = document.getElementById('salaryVsDemandChart').getContext('2d');
            
            // Create chart
            window.salaryVsDemandChart = new Chart(ctx, {
                type: 'scatter',
                data: {
                    datasets: [{
                        label: 'Domains',
                        data: scatterData,
                        backgroundColor: 'rgba(76, 201, 240, 0.7)',
                        borderColor: 'rgba(76, 201, 240, 1)',
                        borderWidth: 1,
                        pointRadius: 8,
                        pointHoverRadius: 10
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const point = context.raw;
                                    return [
                                        `Domain: ${point.domain}`,
                                        `Demand: ${point.x} listings`,
                                        `Avg. Salary: ${Utils.formatCurrency(point.y)}`
                                    ];
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            title: {
                                display: true,
                                text: 'Demand (Number of Listings)',
                                color: '#adb5bd'
                            },
                            ticks: {
                                color: '#adb5bd'
                            }
                        },
                        y: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            title: {
                                display: true,
                                text: 'Average Salary (â‚¹)',
                                color: '#adb5bd'
                            },
                            ticks: {
                                callback: function(value) {
                                    return Utils.formatCurrency(value);
                                },
                                color: '#adb5bd'
                            }
                        }
                    }
                }
            });
            
            // Calculate quadrant data
            calculateMarketQuadrants(scatterData);
        } else {
            document.getElementById('salaryVsDemandChart').innerHTML = '<div class="text-center p-4">No data available</div>';
        }
    } catch (error) {
        console.error('Error initializing salary vs. demand chart:', error);
    } finally {
        Utils.hideLoading('scatterChartLoader');
    }
}

// Calculate and display market quadrants based on scatter data
function calculateMarketQuadrants(scatterData) {
    if (!scatterData || scatterData.length === 0) return;
    
    // Calculate median values for salary and demand
    const salaries = scatterData.map(item => item.y);
    const demands = scatterData.map(item => item.x);
    
    // Sort arrays to find median
    salaries.sort((a, b) => a - b);
    demands.sort((a, b) => a - b);
    
    const medianSalary = salaries[Math.floor(salaries.length / 2)];
    const medianDemand = demands[Math.floor(demands.length / 2)];
    
    // Categorize domains into quadrants
    const highDemandHighSalary = [];
    const highDemandLowSalary = [];
    const lowDemandHighSalary = [];
    const lowDemandLowSalary = [];
    
    scatterData.forEach(item => {
        if (item.x >= medianDemand && item.y >= medianSalary) {
            highDemandHighSalary.push(item.domain);
        } else if (item.x >= medianDemand && item.y < medianSalary) {
            highDemandLowSalary.push(item.domain);
        } else if (item.x < medianDemand && item.y >= medianSalary) {
            lowDemandHighSalary.push(item.domain);
        } else {
            lowDemandLowSalary.push(item.domain);
        }
    });
    
    // Update quadrant elements
    document.getElementById('highDemandHighSalary').textContent = highDemandHighSalary.slice(0, 3).join(', ') || 'None';
    document.getElementById('highDemandLowSalary').textContent = highDemandLowSalary.slice(0, 3).join(', ') || 'None';
    document.getElementById('lowDemandHighSalary').textContent = lowDemandHighSalary.slice(0, 3).join(', ') || 'None';
    document.getElementById('lowDemandLowSalary').textContent = lowDemandLowSalary.slice(0, 3).join(', ') || 'None';
    
    // Update market analysis
    const marketAnalysis = document.getElementById('marketAnalysis');
    if (marketAnalysis) {
        let analysis = `<p><strong>High demand, high salary domains</strong> like ${highDemandHighSalary[0] || 'N/A'} offer the best opportunities currently, with both strong market demand and competitive compensation.</p>`;
        
        analysis += `<p><strong>Low demand, high salary domains</strong> like ${lowDemandHighSalary[0] || 'N/A'} are specialized niches with fewer opportunities but excellent compensation for those who can secure positions.</p>`;
        
        analysis += `<p><strong>Recommendation:</strong> Focus on high demand, high salary domains for optimal career prospects in the current market.</p>`;
        
        marketAnalysis.innerHTML = analysis;
    }
}

// Initialize company hiring patterns chart
async function initCompanyHiringChart() {
    try {
        Utils.showLoading('companyChartLoader');
        
        const data = await Utils.fetchData('/company-hiring');
        
        if (data && data.length > 0) {
            const ctx = document.getElementById('companyHiringChart').getContext('2d');
            
            // Extract company names and counts
            const companies = data.slice(0, 7).map(item => item.company);
            const counts = data.slice(0, 7).map(item => item.count);
            const colors = Utils.generateColors(companies.length, 0.8);
            
            // Create chart
            window.companyHiringChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: companies,
                    datasets: [{
                        label: 'Number of Openings',
                        data: counts,
                        backgroundColor: colors,
                        borderColor: colors.map(color => color.replace(', 0.8)', ', 1)')),
                        borderWidth: 1
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `Openings: ${context.raw}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#adb5bd'
                            }
                        },
                        y: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                color: '#adb5bd'
                            }
                        }
                    }
                }
            });
            
            // Update company table
            updateCompanyTable(data);
        } else {
            document.getElementById('companyHiringChart').innerHTML = '<div class="text-center p-4">No data available</div>';
        }
    } catch (error) {
        console.error('Error initializing company hiring chart:', error);
    } finally {
        Utils.hideLoading('companyChartLoader');
    }
}

// Update company table with data
async function updateCompanyTable(companyData) {
    try {
        const tableBody = document.getElementById('companyTableBody');
        
        if (tableBody && companyData && companyData.length > 0) {
            // Get filtered data to find top domains for each company
            const filteredData = await Utils.fetchData('/filter-data');
            
            // Create a map of company to domains
            const companyDomainMap = new Map();
            
            if (filteredData && filteredData.length > 0) {
                // Group by company and count domains
                filteredData.forEach(item => {
                    if (!companyDomainMap.has(item.Company)) {
                        companyDomainMap.set(item.Company, new Map());
                    }
                    
                    const domainMap = companyDomainMap.get(item.Company);
                    if (!domainMap.has(item['Job Title'])) {
                        domainMap.set(item['Job Title'], 1);
                    } else {
                        domainMap.set(item['Job Title'], domainMap.get(item['Job Title']) + 1);
                    }
                });
            }
            
            // Clear table
            tableBody.innerHTML = '';
            
            // Add rows for top 5 companies
            companyData.slice(0, 5).forEach(company => {
                const row = document.createElement('tr');
                
                // Find top domain for this company
                let topDomain = 'N/A';
                if (companyDomainMap.has(company.company)) {
                    const domainMap = companyDomainMap.get(company.company);
                    if (domainMap.size > 0) {
                        // Convert to array and sort by count
                        const domains = Array.from(domainMap.entries());
                        domains.sort((a, b) => b[1] - a[1]);
                        topDomain = domains[0][0];
                    }
                }
                
                row.innerHTML = `
                    <td>${company.company}</td>
                    <td>${company.count}</td>
                    <td>${topDomain}</td>
                `;
                
                tableBody.appendChild(row);
            });
            
            // Update company analysis
            const topCompany = companyData[0]?.company || 'N/A';
            const topCompanyCount = companyData[0]?.count || 0;
            
            const companyAnalysis = document.getElementById('companyAnalysis');
            if (companyAnalysis) {
                companyAnalysis.innerHTML = `
                    <strong>${topCompany}</strong> leads with ${topCompanyCount} internship openings.
                    Many companies are actively hiring across multiple domains, 
                    indicating a healthy internship market. Consider targeting these
                    top companies for better chances of securing an internship position.
                `;
            }
        }
    } catch (error) {
        console.error('Error updating company table:', error);
    }
}

// Load salary statistics
async function loadSalaryStats() {
    try {
        const salaryData = await Utils.fetchData('/salary-insights');
        
        if (salaryData && salaryData.length > 0) {
            // Sort by average salary
            const sortedData = [...salaryData].sort((a, b) => b.avg_salary - a.avg_salary);
            
            // Get highest and lowest paying domains
            const highestDomain = sortedData[0];
            const lowestDomain = sortedData[sortedData.length - 1];
            
            // Calculate average salary
            const totalSalary = sortedData.reduce((sum, item) => sum + item.avg_salary, 0);
            const avgSalary = totalSalary / sortedData.length;
            
            // Calculate median salary
            const medianSalary = sortedData[Math.floor(sortedData.length / 2)].avg_salary;
            
            // Update UI
            document.getElementById('highestPayingDomain').textContent = `${highestDomain.domain} (${Utils.formatCurrency(highestDomain.avg_salary)})`;
            document.getElementById('lowestPayingDomain').textContent = `${lowestDomain.domain} (${Utils.formatCurrency(lowestDomain.avg_salary)})`;
            document.getElementById('averageSalary').textContent = Utils.formatCurrency(avgSalary);
            document.getElementById('medianSalary').textContent = Utils.formatCurrency(medianSalary);
            
            // Update salary analysis
            const salaryAnalysis = document.getElementById('salaryAnalysis');
            if (salaryAnalysis) {
                salaryAnalysis.innerHTML = `
                    The highest paying domain <strong>${highestDomain.domain}</strong> offers ${Utils.formatCurrency(highestDomain.avg_salary)}, 
                    which is ${Math.round((highestDomain.avg_salary / avgSalary - 1) * 100)}% above average.
                    Specialized roles tend to command higher compensation, while more accessible entry-level positions
                    typically offer lower salaries. The median salary of ${Utils.formatCurrency(medianSalary)} indicates
                    that half of all internships pay above this amount.
                `;
            }
        }
    } catch (error) {
        console.error('Error loading salary stats:', error);
    }
}

// Initialize market quadrants
function initMarketQuadrants() {
    // Already implemented in calculateMarketQuadrants
}

// Initialize filter functionality
function initFilterFunctionality() {
    const applyFiltersBtn = document.getElementById('applyFilters');
    
    if (applyFiltersBtn) {
        applyFiltersBtn.addEventListener('click', async () => {
            try {
                // Show loading state
                applyFiltersBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Applying...';
                applyFiltersBtn.disabled = true;
                
                // Get filter values
                const domain = document.getElementById('domainFilter').value;
                const location = document.getElementById('locationFilter').value;
                const minSalary = document.getElementById('minSalaryFilter').value;
                
                // Build filter query
                let filterQuery = '?';
                if (domain && domain !== 'All') {
                    filterQuery += `domain=${encodeURIComponent(domain)}&`;
                }
                if (location && location !== 'All') {
                    filterQuery += `location=${encodeURIComponent(location)}&`;
                }
                if (minSalary) {
                    filterQuery += `min_salary=${minSalary}`;
                }
                
                // Remove trailing '&' or '?' if needed
                filterQuery = filterQuery.endsWith('&') 
                    ? filterQuery.slice(0, -1) 
                    : (filterQuery === '?' ? '' : filterQuery);
                
                // Fetch filtered data
                const filteredData = await Utils.fetchData(`/filter-data${filterQuery}`);
                
                if (filteredData) {
                    // Process filtered data (just show a toast for now)
                    Utils.createToast(`Filter applied with ${filteredData.length} results`, 'success');
                    
                    // In a real application, we would update all charts here
                    // This is a simplified version just showing how the filter could work
                }
            } catch (error) {
                console.error('Error applying filters:', error);
                Utils.createToast('Failed to apply filters', 'danger');
            } finally {
                // Reset button state
                applyFiltersBtn.innerHTML = '<i class="fas fa-search me-1"></i> Apply Filters';
                applyFiltersBtn.disabled = false;
            }
        });
    }
    
    // Download button functionality
    const downloadBtn = document.getElementById('downloadBtn');
    
    if (downloadBtn) {
        downloadBtn.addEventListener('click', () => {
            // This would typically generate a CSV or JSON file with the data
            // For this demo, just show a toast
            Utils.createToast('Download started', 'info');
            
            // Simulate download
            setTimeout(() => {
                Utils.createToast('Download complete', 'success');
            }, 1500);
        });
    }
}
