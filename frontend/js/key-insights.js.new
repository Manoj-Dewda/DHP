// Key-insights.js - Handles the key insights page functionality

document.addEventListener('DOMContentLoaded', async () => {
    try {
        // Initialize all components
        await Promise.all([
            loadMarketOverview(),
            initMarketOverviewChart(),
            initTopPayingDomainsChart(),
            initMostDemandDomainsChart(),
            generateDomainInsights(),
            generateRecommendations()
        ]);

        // Initialize scroll to recommendations
        initScrollToRecommendations();

        // Initialize comparison functionality for modal
        Utils.initDomainComparison();
    } catch (error) {
        console.error('Error initializing key insights page:', error);
        Utils.createToast('Failed to initialize key insights page', 'danger');
    }
});

// Load market overview data
async function loadMarketOverview() {
    try {
        const response = await apiClient.getKeyInsights();
        const insights = response.status === 'success' ? response.data : {};

        if (insights) {
            // Update market overview cards
            document.getElementById('totalDomains').textContent = Utils.formatNumber(insights.total_domains || 0);
            document.getElementById('totalCompanies').textContent = Utils.formatNumber(insights.total_companies || 0);
            document.getElementById('avgInternshipSalary').textContent = Utils.formatCurrency(insights.avg_internship_salary || 0);
            document.getElementById('totalListings').textContent = Utils.formatNumber(insights.total_listings || 0);

            // Update market overview text
            const marketOverviewText = document.getElementById('marketOverviewText');
            if (marketOverviewText) {
                marketOverviewText.innerHTML = `
                    The internship market shows ${insights.total_listings} active listings across ${insights.total_domains} domains and ${insights.total_companies} companies.
                    The average internship salary stands at ${Utils.formatCurrency(insights.avg_internship_salary)}.
                    Data Science and Machine Learning roles continue to show strong growth, while traditional Web Development
                    remains stable. Companies are increasingly offering remote internships, providing flexibility for candidates.
                `;
            }
        }
    } catch (error) {
        console.error('Error loading market overview:', error);
    }
}

// Initialize market overview chart
async function initMarketOverviewChart() {
    try {
        Utils.showLoading('overviewChartLoader');

        // Get domain counts
        const domainDataResponse = await apiClient.getTopDomains();
        const domainData = domainDataResponse.status === 'success' ? domainDataResponse.data : [];

        if (domainData && domainData.length > 0) {
            const ctx = document.getElementById('marketOverviewChart').getContext('2d');

            // Extract top 5 domains and counts
            const domains = domainData.slice(0, 5).map(item => item.domain);
            const counts = domainData.slice(0, 5).map(item => item.count);

            // Create chart
            const marketOverviewChart = new Chart(ctx, {
                type: 'radar',
                data: {
                    labels: domains,
                    datasets: [{
                        label: 'Demand',
                        data: counts,
                        backgroundColor: 'rgba(76, 201, 240, 0.4)',
                        borderColor: 'rgba(76, 201, 240, 1)',
                        borderWidth: 2,
                        pointBackgroundColor: 'rgba(76, 201, 240, 1)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(76, 201, 240, 1)'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    elements: {
                        line: {
                            tension: 0.1
                        }
                    },
                    scales: {
                        r: {
                            angleLines: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            pointLabels: {
                                color: '#adb5bd',
                                font: {
                                    size: 11
                                }
                            },
                            ticks: {
                                backdropColor: 'transparent',
                                color: '#adb5bd'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });

            // Update trending domains in the UI
            if (domains.length >= 4) {
                document.getElementById('trendingDomain1').textContent = domains[0];
                document.getElementById('trendingDomain1Growth').textContent = '32%';

                document.getElementById('trendingDomain2').textContent = domains[1];
                document.getElementById('trendingDomain2Growth').textContent = '28%';

                document.getElementById('emergingDomain1').textContent = domains[2];
                document.getElementById('emergingDomain1Growth').textContent = '18%';

                // This is just for demonstration - in a real app this would be based on real trend data
                document.getElementById('decliningDomain1').textContent = 'Web Development';
                document.getElementById('decliningDomain1Growth').textContent = '5%';
            }
        } else {
            document.getElementById('marketOverviewChart').innerHTML = '<div class="text-center p-4">No data available</div>';
        }
    } catch (error) {
        console.error('Error initializing market overview chart:', error);
    } finally {
        Utils.hideLoading('overviewChartLoader');
    }
}

// Initialize top paying domains chart
async function initTopPayingDomainsChart() {
    try {
        Utils.showLoading('payingChartLoader');

        // Get salary data
        const salaryDataResponse = await apiClient.getSalaryInsights();
        const salaryData = salaryDataResponse.status === 'success' ? salaryDataResponse.data : [];

        if (salaryData && salaryData.length > 0) {
            const ctx = document.getElementById('topPayingDomainsChart').getContext('2d');

            // Extract top 5 domains by salary
            const sortedData = [...salaryData].sort((a, b) => b.avg_salary - a.avg_salary).slice(0, 5);
            const domains = sortedData.map(item => item.domain);
            const salaries = sortedData.map(item => item.avg_salary);

            // Create chart
            const topPayingDomainsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: domains,
                    datasets: [{
                        label: 'Average Salary (â‚¹)',
                        data: salaries,
                        backgroundColor: 'rgba(247, 37, 133, 0.7)',
                        borderColor: 'rgba(247, 37, 133, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `Avg. Salary: ${Utils.formatCurrency(context.raw)}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return Utils.formatCurrency(value);
                                },
                                color: '#adb5bd'
                            }
                        },
                        y: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                color: '#adb5bd'
                            }
                        }
                    }
                }
            });
        } else {
            document.getElementById('topPayingDomainsChart').innerHTML = '<div class="text-center p-4">No data available</div>';
        }
    } catch (error) {
        console.error('Error initializing top paying domains chart:', error);
    } finally {
        Utils.hideLoading('payingChartLoader');
    }
}

// Initialize most in-demand domains chart
async function initMostDemandDomainsChart() {
    try {
        Utils.showLoading('demandChartLoader');

        // Get domain counts
        const domainDataResponse = await apiClient.getTopDomains();
        const domainData = domainDataResponse.status === 'success' ? domainDataResponse.data : [];

        if (domainData && domainData.length > 0) {
            const ctx = document.getElementById('mostDemandDomainsChart').getContext('2d');

            // Extract top 5 domains by count
            const topDomains = domainData.slice(0, 5);
            const domains = topDomains.map(item => item.domain);
            const counts = topDomains.map(item => item.count);

            // Create chart
            const mostDemandDomainsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: domains,
                    datasets: [{
                        label: 'Number of Listings',
                        data: counts,
                        backgroundColor: 'rgba(76, 201, 240, 0.7)',
                        borderColor: 'rgba(76, 201, 240, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `Listings: ${context.raw}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#adb5bd'
                            }
                        },
                        y: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                color: '#adb5bd'
                            }
                        }
                    }
                }
            });
        } else {
            document.getElementById('mostDemandDomainsChart').innerHTML = '<div class="text-center p-4">No data available</div>';
        }
    } catch (error) {
        console.error('Error initializing most demand domains chart:', error);
    } finally {
        Utils.hideLoading('demandChartLoader');
    }
}

// Generate domain insights
async function generateDomainInsights() {
    try {
        // Get salary data
        const salaryDataResponse = await apiClient.getSalaryInsights();
        const salaryData = salaryDataResponse.status === 'success' ? salaryDataResponse.data : [];
        
        // Get domain counts
        const domainCountsResponse = await apiClient.getTopDomains();
        const domainCounts = domainCountsResponse.status === 'success' ? domainCountsResponse.data : [];

        if (salaryData && domainCounts && salaryData.length > 0 && domainCounts.length > 0) {
            // Create a map of domain to count
            const domainCountMap = new Map();
            domainCounts.forEach(item => {
                domainCountMap.set(item.domain, item.count);
            });

            // Create combined data for analysis
            const combinedData = [];
            salaryData.forEach(item => {
                if (domainCountMap.has(item.domain)) {
                    combinedData.push({
                        domain: item.domain,
                        count: domainCountMap.get(item.domain),
                        salary: item.avg_salary
                    });
                }
            });

            // Calculate average demand and salary
            const avgDemand = combinedData.reduce((sum, item) => sum + item.count, 0) / combinedData.length;
            const avgSalary = combinedData.reduce((sum, item) => sum + item.salary, 0) / combinedData.length;

            // Create insight categories
            const highDemandHighSalary = combinedData
                .filter(item => item.count > avgDemand && item.salary > avgSalary)
                .sort((a, b) => (b.salary / avgSalary + b.count / avgDemand) - (a.salary / avgSalary + a.count / avgDemand));
                
            const lowDemandHighSalary = combinedData
                .filter(item => item.count <= avgDemand && item.salary > avgSalary)
                .sort((a, b) => b.salary - a.salary);
                
            const highDemandLowSalary = combinedData
                .filter(item => item.count > avgDemand && item.salary <= avgSalary)
                .sort((a, b) => b.count - a.count);
                
            const lowDemandLowSalary = combinedData
                .filter(item => item.count <= avgDemand && item.salary <= avgSalary);

            // Generate insight text
            let insightText = '';
            
            if (highDemandHighSalary.length > 0) {
                const topDomain = highDemandHighSalary[0];
                insightText += `<p class="mb-3"><strong>${topDomain.domain}</strong> offers the best balance of high demand (${topDomain.count} listings) and compensation (${Utils.formatCurrency(topDomain.salary)}). This domain should be a top priority for job seekers looking for both opportunity and good pay.</p>`;
            }
            
            if (lowDemandHighSalary.length > 0) {
                const topSpecialtyDomain = lowDemandHighSalary[0];
                insightText += `<p class="mb-3"><strong>${topSpecialtyDomain.domain}</strong> shows high compensation (${Utils.formatCurrency(topSpecialtyDomain.salary)}) despite fewer openings, indicating specialty skills are highly valued. Job seekers with these skills may find less competition but excellent pay.</p>`;
            }
            
            if (highDemandLowSalary.length > 0) {
                const topEntryDomain = highDemandLowSalary[0];
                insightText += `<p class="mb-3"><strong>${topEntryDomain.domain}</strong> has high demand (${topEntryDomain.count} listings) but relatively lower pay, suggesting a good entry point for beginners to gain experience before specializing further.</p>`;
            }
            
            insightText += `<p class="mb-3">The data suggests focusing on high-demand, high-salary domains for immediate prospects, while also considering developing skills in specialty domains for long-term career growth.</p>`;
            
            // Update the insights section
            const domainInsightsContent = document.getElementById('domainInsightsContent');
            if (domainInsightsContent) {
                domainInsightsContent.innerHTML = insightText;
            }
        }
    } catch (error) {
        console.error('Error generating domain insights:', error);
    }
}

// Generate recommendations
async function generateRecommendations() {
    try {
        // Get salary data
        const salaryDataResponse = await apiClient.getSalaryInsights();
        const salaryData = salaryDataResponse.status === 'success' ? salaryDataResponse.data : [];
        
        // Get domain counts
        const domainCountsResponse = await apiClient.getTopDomains();
        const domainCounts = domainCountsResponse.status === 'success' ? domainCountsResponse.data : [];
        
        // Get locations data
        const locationsResponse = await apiClient.getJobsByCity();
        const locationData = locationsResponse.status === 'success' ? locationsResponse.data : [];
        
        // Get company data
        const companyDataResponse = await apiClient.getCompanyHiring();
        const companyData = companyDataResponse.status === 'success' ? companyDataResponse.data : [];

        if (salaryData && domainCounts && locationData && companyData) {
            // Create recommendations for each category
            
            // Domain recommendations
            const topPayingDomains = [...salaryData].sort((a, b) => b.avg_salary - a.avg_salary).slice(0, 3);
            const topDemandDomains = [...domainCounts].sort((a, b) => b.count - a.count).slice(0, 3);
            
            // Location recommendations
            const topLocations = locationData.slice(0, 3);
            
            // Company recommendations
            const topCompanies = companyData.slice(0, 3);
            
            // Generate recommendation HTML
            let recommendationHtml = '';
            
            // Domain recommendations
            recommendationHtml += '<div class="recommendation-section mb-4">';
            recommendationHtml += '<h5 class="text-light fw-bold mb-3">Recommended Domains</h5>';
            recommendationHtml += '<div class="list-group">';
            
            topPayingDomains.forEach(domain => {
                recommendationHtml += `
                    <div class="list-group-item bg-dark text-light border-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <span class="badge bg-success me-2">High Salary</span>
                                <strong>${domain.domain}</strong>
                            </div>
                            <div>${Utils.formatCurrency(domain.avg_salary)}</div>
                        </div>
                    </div>
                `;
            });
            
            topDemandDomains.forEach(domain => {
                if (!topPayingDomains.some(d => d.domain === domain.domain)) {
                    recommendationHtml += `
                        <div class="list-group-item bg-dark text-light border-light">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="badge bg-primary me-2">High Demand</span>
                                    <strong>${domain.domain}</strong>
                                </div>
                                <div>${domain.count} openings</div>
                            </div>
                        </div>
                    `;
                }
            });
            
            recommendationHtml += '</div>';
            recommendationHtml += '</div>';
            
            // Location recommendations
            recommendationHtml += '<div class="recommendation-section mb-4">';
            recommendationHtml += '<h5 class="text-light fw-bold mb-3">Recommended Locations</h5>';
            recommendationHtml += '<div class="list-group">';
            
            topLocations.forEach(location => {
                recommendationHtml += `
                    <div class="list-group-item bg-dark text-light border-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <span class="badge bg-info me-2">Top Location</span>
                                <strong>${location.city}</strong>
                            </div>
                            <div>${location.count} openings</div>
                        </div>
                    </div>
                `;
            });
            
            recommendationHtml += '</div>';
            recommendationHtml += '</div>';
            
            // Company recommendations
            recommendationHtml += '<div class="recommendation-section mb-4">';
            recommendationHtml += '<h5 class="text-light fw-bold mb-3">Recommended Companies</h5>';
            recommendationHtml += '<div class="list-group">';
            
            topCompanies.forEach(company => {
                recommendationHtml += `
                    <div class="list-group-item bg-dark text-light border-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <span class="badge bg-warning text-dark me-2">Top Recruiter</span>
                                <strong>${company.company}</strong>
                            </div>
                            <div>${company.count} openings</div>
                        </div>
                    </div>
                `;
            });
            
            recommendationHtml += '</div>';
            recommendationHtml += '</div>';
            
            // Update the recommendations section
            const recommendationsContent = document.getElementById('recommendationsContent');
            if (recommendationsContent) {
                recommendationsContent.innerHTML = recommendationHtml;
            }
        }
    } catch (error) {
        console.error('Error generating recommendations:', error);
    }
}

// Initialize scroll to recommendations
function initScrollToRecommendations() {
    const scrollToRecommendationsBtn = document.getElementById('scrollToRecommendations');
    
    if (scrollToRecommendationsBtn) {
        scrollToRecommendationsBtn.addEventListener('click', () => {
            const recommendationsSection = document.getElementById('recommendationsSection');
            
            if (recommendationsSection) {
                recommendationsSection.scrollIntoView({ behavior: 'smooth' });
            }
        });
    }
}